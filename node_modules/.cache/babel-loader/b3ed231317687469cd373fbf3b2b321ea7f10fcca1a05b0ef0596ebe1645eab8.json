{"ast":null,"code":"export const filterComments = (comments, filter) => {\n  if (!filter.search) return comments;\n  const searchLower = filter.search.toLowerCase();\n  return comments.filter(comment => {\n    return filter.searchFields.some(field => {\n      var _comment$field;\n      const value = ((_comment$field = comment[field]) === null || _comment$field === void 0 ? void 0 : _comment$field.toString().toLowerCase()) || '';\n      return value.includes(searchLower);\n    });\n  });\n};\nexport const sortComments = (comments, sort) => {\n  if (!sort.field || !sort.direction) return comments;\n  return [...comments].sort((a, b) => {\n    const aValue = a[sort.field];\n    const bValue = b[sort.field];\n    if (typeof aValue === 'number' && typeof bValue === 'number') {\n      return sort.direction === 'asc' ? aValue - bValue : bValue - aValue;\n    }\n    const aString = String(aValue).toLowerCase();\n    const bString = String(bValue).toLowerCase();\n    return sort.direction === 'asc' ? aString.localeCompare(bString) : bString.localeCompare(aString);\n  });\n};\nexport const paginateComments = (comments, pagination) => {\n  const startIndex = (pagination.currentPage - 1) * pagination.pageSize;\n  return comments.slice(startIndex, startIndex + pagination.pageSize);\n};\nexport const getNextSortDirection = current => {\n  if (current === null) return 'asc';\n  if (current === 'asc') return 'desc';\n  return null;\n};\nexport const persistFilters = (key, data) => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\nexport const getPersistedFilters = key => {\n  const data = localStorage.getItem(key);\n  return data ? JSON.parse(data) : null;\n};","map":{"version":3,"names":["filterComments","comments","filter","search","searchLower","toLowerCase","comment","searchFields","some","field","_comment$field","value","toString","includes","sortComments","sort","direction","a","b","aValue","bValue","aString","String","bString","localeCompare","paginateComments","pagination","startIndex","currentPage","pageSize","slice","getNextSortDirection","current","persistFilters","key","data","localStorage","setItem","JSON","stringify","getPersistedFilters","getItem","parse"],"sources":["C:/Users/JARVIS/OneDrive/Desktop/Swift Company/src/utils/dataUtils.ts"],"sourcesContent":["import { Comment, SortConfig, FilterConfig, PaginationConfig } from '../types';\n\nexport const filterComments = (comments: Comment[], filter: FilterConfig): Comment[] => {\n  if (!filter.search) return comments;\n  \n  const searchLower = filter.search.toLowerCase();\n  return comments.filter(comment => {\n    return filter.searchFields.some(field => {\n      const value = comment[field]?.toString().toLowerCase() || '';\n      return value.includes(searchLower);\n    });\n  });\n};\n\nexport const sortComments = (comments: Comment[], sort: SortConfig): Comment[] => {\n  if (!sort.field || !sort.direction) return comments;\n\n  return [...comments].sort((a, b) => {\n    const aValue = a[sort.field!];\n    const bValue = b[sort.field!];\n\n    if (typeof aValue === 'number' && typeof bValue === 'number') {\n      return sort.direction === 'asc' ? aValue - bValue : bValue - aValue;\n    }\n\n    const aString = String(aValue).toLowerCase();\n    const bString = String(bValue).toLowerCase();\n\n    return sort.direction === 'asc'\n      ? aString.localeCompare(bString)\n      : bString.localeCompare(aString);\n  });\n};\n\nexport const paginateComments = (\n  comments: Comment[],\n  pagination: PaginationConfig\n): Comment[] => {\n  const startIndex = (pagination.currentPage - 1) * pagination.pageSize;\n  return comments.slice(startIndex, startIndex + pagination.pageSize);\n};\n\nexport const getNextSortDirection = (current: 'asc' | 'desc' | null): 'asc' | 'desc' | null => {\n  if (current === null) return 'asc';\n  if (current === 'asc') return 'desc';\n  return null;\n};\n\nexport const persistFilters = (key: string, data: any): void => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\n\nexport const getPersistedFilters = (key: string): any => {\n  const data = localStorage.getItem(key);\n  return data ? JSON.parse(data) : null;\n};"],"mappings":"AAEA,OAAO,MAAMA,cAAc,GAAGA,CAACC,QAAmB,EAAEC,MAAoB,KAAgB;EACtF,IAAI,CAACA,MAAM,CAACC,MAAM,EAAE,OAAOF,QAAQ;EAEnC,MAAMG,WAAW,GAAGF,MAAM,CAACC,MAAM,CAACE,WAAW,CAAC,CAAC;EAC/C,OAAOJ,QAAQ,CAACC,MAAM,CAACI,OAAO,IAAI;IAChC,OAAOJ,MAAM,CAACK,YAAY,CAACC,IAAI,CAACC,KAAK,IAAI;MAAA,IAAAC,cAAA;MACvC,MAAMC,KAAK,GAAG,EAAAD,cAAA,GAAAJ,OAAO,CAACG,KAAK,CAAC,cAAAC,cAAA,uBAAdA,cAAA,CAAgBE,QAAQ,CAAC,CAAC,CAACP,WAAW,CAAC,CAAC,KAAI,EAAE;MAC5D,OAAOM,KAAK,CAACE,QAAQ,CAACT,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMU,YAAY,GAAGA,CAACb,QAAmB,EAAEc,IAAgB,KAAgB;EAChF,IAAI,CAACA,IAAI,CAACN,KAAK,IAAI,CAACM,IAAI,CAACC,SAAS,EAAE,OAAOf,QAAQ;EAEnD,OAAO,CAAC,GAAGA,QAAQ,CAAC,CAACc,IAAI,CAAC,CAACE,CAAC,EAAEC,CAAC,KAAK;IAClC,MAAMC,MAAM,GAAGF,CAAC,CAACF,IAAI,CAACN,KAAK,CAAE;IAC7B,MAAMW,MAAM,GAAGF,CAAC,CAACH,IAAI,CAACN,KAAK,CAAE;IAE7B,IAAI,OAAOU,MAAM,KAAK,QAAQ,IAAI,OAAOC,MAAM,KAAK,QAAQ,EAAE;MAC5D,OAAOL,IAAI,CAACC,SAAS,KAAK,KAAK,GAAGG,MAAM,GAAGC,MAAM,GAAGA,MAAM,GAAGD,MAAM;IACrE;IAEA,MAAME,OAAO,GAAGC,MAAM,CAACH,MAAM,CAAC,CAACd,WAAW,CAAC,CAAC;IAC5C,MAAMkB,OAAO,GAAGD,MAAM,CAACF,MAAM,CAAC,CAACf,WAAW,CAAC,CAAC;IAE5C,OAAOU,IAAI,CAACC,SAAS,KAAK,KAAK,GAC3BK,OAAO,CAACG,aAAa,CAACD,OAAO,CAAC,GAC9BA,OAAO,CAACC,aAAa,CAACH,OAAO,CAAC;EACpC,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMI,gBAAgB,GAAGA,CAC9BxB,QAAmB,EACnByB,UAA4B,KACd;EACd,MAAMC,UAAU,GAAG,CAACD,UAAU,CAACE,WAAW,GAAG,CAAC,IAAIF,UAAU,CAACG,QAAQ;EACrE,OAAO5B,QAAQ,CAAC6B,KAAK,CAACH,UAAU,EAAEA,UAAU,GAAGD,UAAU,CAACG,QAAQ,CAAC;AACrE,CAAC;AAED,OAAO,MAAME,oBAAoB,GAAIC,OAA8B,IAA4B;EAC7F,IAAIA,OAAO,KAAK,IAAI,EAAE,OAAO,KAAK;EAClC,IAAIA,OAAO,KAAK,KAAK,EAAE,OAAO,MAAM;EACpC,OAAO,IAAI;AACb,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGA,CAACC,GAAW,EAAEC,IAAS,KAAW;EAC9DC,YAAY,CAACC,OAAO,CAACH,GAAG,EAAEI,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;AACjD,CAAC;AAED,OAAO,MAAMK,mBAAmB,GAAIN,GAAW,IAAU;EACvD,MAAMC,IAAI,GAAGC,YAAY,CAACK,OAAO,CAACP,GAAG,CAAC;EACtC,OAAOC,IAAI,GAAGG,IAAI,CAACI,KAAK,CAACP,IAAI,CAAC,GAAG,IAAI;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}