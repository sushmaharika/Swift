{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { filterComments, sortComments, paginateComments, getPersistedFilters, persistFilters } from '../utils/dataUtils';\nconst STORAGE_KEY = 'commentsConfig';\nexport const useComments = () => {\n  _s();\n  var _getPersistedFilters, _getPersistedFilters2, _getPersistedFilters3;\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [sort, setSort] = useState(((_getPersistedFilters = getPersistedFilters(STORAGE_KEY)) === null || _getPersistedFilters === void 0 ? void 0 : _getPersistedFilters.sort) || {\n    field: null,\n    direction: null\n  });\n  const [filter, setFilter] = useState(((_getPersistedFilters2 = getPersistedFilters(STORAGE_KEY)) === null || _getPersistedFilters2 === void 0 ? void 0 : _getPersistedFilters2.filter) || {\n    search: '',\n    searchFields: ['name', 'email', 'body']\n  });\n  const [pagination, setPagination] = useState(((_getPersistedFilters3 = getPersistedFilters(STORAGE_KEY)) === null || _getPersistedFilters3 === void 0 ? void 0 : _getPersistedFilters3.pagination) || {\n    currentPage: 1,\n    pageSize: 10,\n    totalItems: 0\n  });\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await axios.get('https://jsonplaceholder.typicode.com/comments');\n        // Remove duplicates based on email and name combination\n        const uniqueComments = response.data.reduce((acc, current) => {\n          const isDuplicate = acc.some(item => item.email === current.email && item.name === current.name);\n          if (!isDuplicate) {\n            acc.push(current);\n          }\n          return acc;\n        }, []);\n        setComments(uniqueComments);\n        setPagination(prev => ({\n          ...prev,\n          totalItems: uniqueComments.length\n        }));\n        setError(null);\n      } catch (err) {\n        setError('Failed to fetch comments');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchComments();\n  }, []);\n  useEffect(() => {\n    persistFilters(STORAGE_KEY, {\n      sort,\n      filter,\n      pagination\n    });\n  }, [sort, filter, pagination]);\n  const filteredComments = useMemo(() => {\n    return filterComments(comments, filter);\n  }, [comments, filter]);\n  const sortedComments = useMemo(() => {\n    return sortComments(filteredComments, sort);\n  }, [filteredComments, sort]);\n  const paginatedComments = useMemo(() => {\n    return paginateComments(sortedComments, pagination);\n  }, [sortedComments, pagination]);\n  const totalFilteredItems = filteredComments.length;\n  return {\n    comments: paginatedComments,\n    loading,\n    error,\n    sort,\n    setSort,\n    filter,\n    setFilter,\n    pagination,\n    setPagination,\n    totalFilteredItems\n  };\n};\n_s(useComments, \"NazOjnIkIcM8bCmRmBhD0MalavI=\");","map":{"version":3,"names":["useState","useEffect","useMemo","axios","filterComments","sortComments","paginateComments","getPersistedFilters","persistFilters","STORAGE_KEY","useComments","_s","_getPersistedFilters","_getPersistedFilters2","_getPersistedFilters3","comments","setComments","loading","setLoading","error","setError","sort","setSort","field","direction","filter","setFilter","search","searchFields","pagination","setPagination","currentPage","pageSize","totalItems","fetchComments","response","get","uniqueComments","data","reduce","acc","current","isDuplicate","some","item","email","name","push","prev","length","err","filteredComments","sortedComments","paginatedComments","totalFilteredItems"],"sources":["C:/Users/JARVIS/OneDrive/Desktop/Swift Company/src/hooks/useComments.ts"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { Comment, SortConfig, FilterConfig, PaginationConfig } from '../types';\nimport { filterComments, sortComments, paginateComments, getPersistedFilters, persistFilters } from '../utils/dataUtils';\n\nconst STORAGE_KEY = 'commentsConfig';\n\nexport const useComments = () => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const [sort, setSort] = useState<SortConfig>(\n    getPersistedFilters(STORAGE_KEY)?.sort || {\n      field: null,\n      direction: null\n    }\n  );\n\n  const [filter, setFilter] = useState<FilterConfig>(\n    getPersistedFilters(STORAGE_KEY)?.filter || {\n      search: '',\n      searchFields: ['name', 'email', 'body']\n    }\n  );\n\n  const [pagination, setPagination] = useState<PaginationConfig>(\n    getPersistedFilters(STORAGE_KEY)?.pagination || {\n      currentPage: 1,\n      pageSize: 10,\n      totalItems: 0\n    }\n  );\n\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await axios.get('https://jsonplaceholder.typicode.com/comments');\n        // Remove duplicates based on email and name combination\n        const uniqueComments = response.data.reduce((acc: Comment[], current: Comment) => {\n          const isDuplicate = acc.some(item => \n            item.email === current.email && item.name === current.name\n          );\n          if (!isDuplicate) {\n            acc.push(current);\n          }\n          return acc;\n        }, []);\n\n        setComments(uniqueComments);\n        setPagination(prev => ({ ...prev, totalItems: uniqueComments.length }));\n        setError(null);\n      } catch (err) {\n        setError('Failed to fetch comments');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchComments();\n  }, []);\n\n  useEffect(() => {\n    persistFilters(STORAGE_KEY, { sort, filter, pagination });\n  }, [sort, filter, pagination]);\n\n  const filteredComments = useMemo(() => {\n    return filterComments(comments, filter);\n  }, [comments, filter]);\n\n  const sortedComments = useMemo(() => {\n    return sortComments(filteredComments, sort);\n  }, [filteredComments, sort]);\n\n  const paginatedComments = useMemo(() => {\n    return paginateComments(sortedComments, pagination);\n  }, [sortedComments, pagination]);\n\n  const totalFilteredItems = filteredComments.length;\n\n  return {\n    comments: paginatedComments,\n    loading,\n    error,\n    sort,\n    setSort,\n    filter,\n    setFilter,\n    pagination,\n    setPagination,\n    totalFilteredItems\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}